SIZE 100

CYCLE 1000
CYCLES 200

#range.1 file;0:72302|1
range.1 file;2:20|1
#range.0 k;0:100|1

# parameters of message transfer
# delay values here are relative to cycle length, in percentage,
# eg 50 means half the cycle length, 200 twice the cycle length, etc.
MINDELAY 20
MAXDELAY 70
DROP 0

#random.seed 1234567890
network.size SIZE
simulation.endtime CYCLE*CYCLES
simulation.logtime CYCLE

protocol.urt UniformRandomTransport
{
	mindelay (CYCLE*MINDELAY)/100
	maxdelay (CYCLE*MAXDELAY)/100
}

protocol.tr UnreliableTransport
{
	transport urt
	drop DROP
}

protocol.idle IdleProtocolSN

protocol.gossip CyclonSN
{
	cache 100
	l 20
	idle idle
	step CYCLE
	transport tr
	period CYCLE
}


protocol.epid EpidemicNews
{
	protocol.gossip gossip
	protocol.idle idle
	protocol.news_manager news
	hash true
}

protocol.epidemicManager EDEpidemicManagerMD5
{
	protocol epid
	transport tr
	period CYCLE
}

protocol.news NewsManager
{
	idle idle
	transport tr
	period period
	step CYCLE
}

control.addNews AddNews
{
	protocol.newsManager news
	protocol.idle idle
	protocol.newscast gossip
	
	friendshipNo 0
	statusChangeNo 1
	commentNo 0
	
	step CYCLE
	
	from CYCLE*100
	until CYCLE*101

}

control.dissObs DisseminationObserver
{
	protocol.news news
	protocol.gossip gossip
	protocol.idle idle
	step CYCLE
	from CYCLE*100
}

#control.degree example.sn.control.graphob.DegreeObserver
#{
#	protocol gossip
#	idle idle
#	step CYCLE
#	
#	from CYCLE*100
#}

#control.dynamicsn OscillatingSocialNetwork
#{
#	minsize 3*SIZE/4
#	maxsize SIZE
#	step CYCLE
#	period 10*CYCLE
#}


#control.dot DotGraph
#{
#	linkable gossip
#	step CYCLE
#}

init.sch CDScheduler
{
	protocol gossip
	#randstart
}

network.node SNNode

init.prepareNet InitSocialNetwork
{
	linkable idle
	directory /home/zando/uni/specialistica/tesi/documentazione/res/
	fileBegin Res
	fileNo file
}

init.wireNet WireNet
{
	idle idle
	linkable gossip
	n 20
}