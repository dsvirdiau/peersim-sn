CYCLE 1000
CYCLES 100

range.1 k;0:100|1

SIZE 15000

MINDELAY 20
MAXDELAY 70
DROP 0

#random.seed 1234567890
network.size SIZE
simulation.endtime CYCLE*CYCLES
simulation.logtime CYCLE

protocol.urt UniformRandomTransport
{
	mindelay (CYCLE*MINDELAY)/100
	maxdelay (CYCLE*MAXDELAY)/100
}

protocol.tr UnreliableTransport
{
	transport urt
	drop DROP
}

protocol.gossip example.sn.gossip.protocol.Cyclon
{
	cache 20
	idle_protocol gossip
	step CYCLE
	transport tr
	period CYCLE

	gossip 20
	item example.sn.gossip.item.ItemSimAge
	select example.sn.gossip.comparator.AgeDescending
	duplicate example.sn.gossip.comparator.AgeAscending	
}

init.sch CDScheduler
{
	protocol gossip
}

init.prepareNetinit WireKOut
{
	protocol gossip
	k 5
}

#control.degree DegreeStats
#{
#	protocol gossip
#	method freq
#	undir
#	step CYCLE
#}

control.degree example.reports.DegreeObserver
{
	protocol gossip
	idle gossip
	step CYCLE
	starttime CYCLE*99
	endtime CYCLE*100
}
