SIZE 100

CYCLE 1000
CYCLES 501

range.0 k;0:10|1
range.1 file;0:72302|1
#range.1 file;0,1,3,9,10
#range.2 stepSize;1000,2000,5000,10000,25000

MINDELAY 20
MAXDELAY 70
DROP 0

random.seed 1234567890
network.size SIZE
simulation.endtime CYCLE*CYCLES
simulation.logtime CYCLE

protocol.urt UniformRandomTransport
{
	mindelay (CYCLE*MINDELAY)/100
	maxdelay (CYCLE*MAXDELAY)/100
}

protocol.tr UnreliableTransport
{
	transport urt
	drop DROP
}

protocol.idle IdleProtocolSN

protocol.gossip CyclonSN
{
	cache 50
	l 20
	idle idle
	step CYCLE
	stepSize 5000
	transport tr
	period CYCLE
}

init.sch CDScheduler
{
	protocol gossip
	#randstart
}

network.node SNNode

init.prepareNet InitSocialNetwork
{
	linkable idle
	directory /home/zando/uni/specialistica/tesi/documentazione/res/
	fileBegin Res
	fileNo file
}

init.wireNet WireNet
{
	idle idle
	linkable gossip
	n 20
}

control.dynamic OscillatingSocialNetwork
{
	minsize 2
	period 20000

	init.wire SNNodeInit
	{
		idle idle
		linkable gossip
		n 5
	}
	
	step CYCLE
	from 50000
}

#control.connectivityStrong peersim.reports.ConnectivityObserver
#{
#	protocol gossip
#	type scc
#	stats
#
#	step CYCLE
#}

#control.connectivityWeak peersim.reports.ConnectivityObserver
#{
#	protocol gossip
#	type wcc
#	stats
#
#	step CYCLE
#}

control.weak WealConnectivityObserver
{
	protocol gossip
	stats

	step CYCLE
}


control.degree example.sn.control.graphob.DegreeObserver
{
	protocol gossip
	idle idle
	step CYCLE
	#from 350000
}