SIZE 100

SECOND 1000
MINUTE 60*SECOND
HOUR 60*MINUTE
DAY 24*HOUR

#range.0 k;0:10|1
#range.1 file;0,1,3,9,10
range.1 file;0

MINDELAY 20
MAXDELAY 70
DROP 0

#random.seed 1234567890
network.size SIZE
simulation.endtime 12*HOUR
simulation.logtime 1*SECOND

protocol.urt UniformRandomTransport
{
	mindelay (SECOND*MINDELAY)/100
	maxdelay (SECOND*MAXDELAY)/100
}

protocol.tr UnreliableTransport
{
	transport urt
	drop DROP
}

protocol.idle IdleProtocolSN

protocol.gossip CyclonSN
{
	cache 50
	l 5
	idle idle
	countContact false
	transport tr

	step SECOND
	
	#0 for never run the init class
	emptyCycles 0
	init.wire SNNodeInit
	{
		idle idle
		linkable gossip
		n 20
	}
}

protocol.news NewsManager
{
	idle idle
	epidemic epid
	period period
	step SECOND
}

protocol.epid EpidemicNews
{
	protocol.gossip gossip
	protocol.idle idle
	protocol.news_manager news
	hash true
	k 0.5
}

protocol.epidemicManager EDEpidemicManagerMD5
{
	protocol epid
	transport tr
	period SECOND
	step SECOND
	
	startTime 1*MINUTE
}

protocol.antiEntrophy AntiEntrophy
{
	epidemic epid

	step 10*MINUTE
	from 5*MINUTE
}

control.addNews AddNews
{
	protocol.newsManager news
	protocol.idle idle
	protocol.gossip gossip
	
	friendshipNo 0
	statusChangeNo 0
	commentNo 3
	
	step 1*MINUTE
	
	from 1*MINUTE
}

control.addNews1 AddNews
{
	protocol.newsManager news
	protocol.idle idle
	protocol.gossip gossip
	
	friendshipNo 0
	statusChangeNo 1
	commentNo 0
	
	step 1*MINUTE
	
	from 1*MINUTE
}

init.sch CDScheduler
{
	protocol gossip
	#randstart
}

network.node SNNode

init.prepareNet InitSocialNetwork
{
	linkable idle
	directory /home/zando/uni/specialistica/tesi/documentazione/res/
	fileBegin Res
	fileNo file
}

init.wireNet WireNet
{
	idle idle
	linkable gossip
	n 20
}

#control.dynamic OscillatingSocialNetwork
#{
#	minsize 10
#	period 2*HOUR
#
#	init.wire SNNodeInit
#	{
#		idle idle
#		linkable gossip
#		n 5
#	}
#	
#	step SECOND
#	from 50000
#}

#control.weak WeakConnectivityObserver
#{
#	protocol gossip
#
#	step 1*MINUTE
#	from 40*SECOND
#}

#control.degree example.sn.control.graphob.DegreeObserver
#{
#	protocol gossip
#	idle idle
#	step 1*MINUTE
#	from 50*SECOND
#}

control.dissObs DisseminationObserver
{
	protocol.news news
	protocol.gossip gossip
	protocol.idle idle
	step SECOND
	from 1*MINUTE
}